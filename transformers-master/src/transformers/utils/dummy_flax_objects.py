# This file is autogenerated by the command `make fix-copies`, do not edit.
from ..file_utils import requires_backends


class FlaxPreTrainedModel:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["flax"])

    @classmethod
    def from_pretrained(self, *args, **kwargs):
        requires_backends(self, ["flax"])


FLAX_MODEL_FOR_MASKED_LM_MAPPING = None


FLAX_MODEL_FOR_MULTIPLE_CHOICE_MAPPING = None


FLAX_MODEL_FOR_NEXT_SENTENCE_PREDICTION_MAPPING = None


FLAX_MODEL_FOR_PRETRAINING_MAPPING = None


FLAX_MODEL_FOR_QUESTION_ANSWERING_MAPPING = None


FLAX_MODEL_FOR_SEQUENCE_CLASSIFICATION_MAPPING = None


FLAX_MODEL_FOR_TOKEN_CLASSIFICATION_MAPPING = None


FLAX_MODEL_MAPPING = None


class FlaxAutoModel:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["flax"])

    @classmethod
    def from_pretrained(self, *args, **kwargs):
        requires_backends(self, ["flax"])


class FlaxAutoModelForMaskedLM:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["flax"])

    @classmethod
    def from_pretrained(self, *args, **kwargs):
        requires_backends(self, ["flax"])


class FlaxAutoModelForMultipleChoice:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["flax"])

    @classmethod
    def from_pretrained(self, *args, **kwargs):
        requires_backends(self, ["flax"])


class FlaxAutoModelForNextSentencePrediction:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["flax"])

    @classmethod
    def from_pretrained(self, *args, **kwargs):
        requires_backends(self, ["flax"])


class FlaxAutoModelForPreTraining:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["flax"])

    @classmethod
    def from_pretrained(self, *args, **kwargs):
        requires_backends(self, ["flax"])


class FlaxAutoModelForQuestionAnswering:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["flax"])

    @classmethod
    def from_pretrained(self, *args, **kwargs):
        requires_backends(self, ["flax"])


class FlaxAutoModelForSequenceClassification:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["flax"])

    @classmethod
    def from_pretrained(self, *args, **kwargs):
        requires_backends(self, ["flax"])


class FlaxAutoModelForTokenClassification:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["flax"])

    @classmethod
    def from_pretrained(self, *args, **kwargs):
        requires_backends(self, ["flax"])


class FlaxBertForMaskedLM:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["flax"])

    @classmethod
    def from_pretrained(self, *args, **kwargs):
        requires_backends(self, ["flax"])


class FlaxBertForMultipleChoice:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["flax"])

    @classmethod
    def from_pretrained(self, *args, **kwargs):
        requires_backends(self, ["flax"])


class FlaxBertForNextSentencePrediction:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["flax"])


class FlaxBertForPreTraining:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["flax"])


class FlaxBertForQuestionAnswering:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["flax"])

    @classmethod
    def from_pretrained(self, *args, **kwargs):
        requires_backends(self, ["flax"])


class FlaxBertForSequenceClassification:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["flax"])

    @classmethod
    def from_pretrained(self, *args, **kwargs):
        requires_backends(self, ["flax"])


class FlaxBertForTokenClassification:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["flax"])

    @classmethod
    def from_pretrained(self, *args, **kwargs):
        requires_backends(self, ["flax"])


class FlaxBertModel:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["flax"])

    @classmethod
    def from_pretrained(self, *args, **kwargs):
        requires_backends(self, ["flax"])


class FlaxBertPreTrainedModel:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["flax"])

    @classmethod
    def from_pretrained(self, *args, **kwargs):
        requires_backends(self, ["flax"])


class FlaxRobertaModel:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["flax"])

    @classmethod
    def from_pretrained(self, *args, **kwargs):
        requires_backends(self, ["flax"])
